{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " Enter a choice : Rock, Paper or Scissors : Rock\n",
      "You chose: Rock And the Computer chose: Paper\n",
      "Paper Covers Rock, Computer Wins\n"
     ]
    }
   ],
   "source": [
    "import random\n",
    "def get_choices():\n",
    "    options = [\"Rock\", \"Paper\", \"Scissors\"]\n",
    "    player_choice = input(\"Enter a choice : Rock, Paper or Scissors : \")\n",
    "    computer_choice = random.choice(options)\n",
    "    choices = {\"player\":player_choice, \"computer\":computer_choice}\n",
    "    return choices\n",
    "\n",
    "def check_win(player,computer):\n",
    "    print (f\"You chose: {player} And the Computer chose: {computer}\")\n",
    "    if player == computer:\n",
    "        return \"It's a tie!!\"\n",
    "    elif player == \"Rock\":\n",
    "        if computer == \"Scissors\":\n",
    "            return \"Rock Smashes Scissors, You Win!!\"\n",
    "        else:\n",
    "            return \"Paper Covers Rock, Computer Wins\"\n",
    "        \n",
    "    elif player == \"Paper\":\n",
    "        if computer == \"Rock\":\n",
    "            return \"Paper Covers Rock, You Win!!\"\n",
    "        else:\n",
    "            return \"Scissors cuts Paper, Computer Wins\"       \n",
    "        \n",
    "    elif player == \"Scissors\":\n",
    "        if computer == \"Paper\":\n",
    "            return \"Scissors cuts Paper, You Win!!\"\n",
    "        else:\n",
    "            return \"Rock Smashes Scissors, Computer Wins\"         \n",
    "\n",
    "choices = get_choices()\n",
    "result = check_win(choices[\"player\"], choices[\"computer\"])\n",
    "print(result)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
